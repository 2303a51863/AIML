{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNFTpU/GBT3VpPytjn8rhbc",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/2303a51863/AIML/blob/main/Untitled2.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Implement Breadth First,Depth first and A* search Algorithms\n",
        "part-01-Implement Breadth First search algorithm using a queue"
      ],
      "metadata": {
        "id": "d-LrbX24LgFG"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from queue import Queue\n",
        "graph={0:[1,3],1:[0,2,3],2:[1,4,5],3:[0,1,4],4:[2,3,5],5:[2,4]}\n",
        "print('The adjacency List representing the graph is:')\n",
        "print(graph)\n",
        "def bfs(graph,source):\n",
        "  Q=Queue()\n",
        "  visited_vertices=set()\n",
        "  Q.put(source)\n",
        "  visited_vertices.update({0})\n",
        "  while not Q.empty():\n",
        "    vertex = Q.get()\n",
        "    print(vertex,end=\"-->\")\n",
        "    for u in graph[vertex]:\n",
        "      if u not in visited_vertices:\n",
        "        Q.put(u)\n",
        "        visited_vertices.add(u)\n",
        "  print(\"\")\n",
        "bfs(graph,0)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_0KUxb6SEahZ",
        "outputId": "ade20e72-8a1f-4394-86e9-7df0fe014703"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "The adjacency List representing the graph is:\n",
            "{0: [1, 3], 1: [0, 2, 3], 2: [1, 4, 5], 3: [0, 1, 4], 4: [2, 3, 5], 5: [2, 4]}\n",
            "0-->1-->3-->2-->4-->5-->\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Part 2-Implement Depth First Search Algorithm using a stack"
      ],
      "metadata": {
        "id": "t2O4ufQzEm5U"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "graph = {\n",
        "    'A' : ['B','S'],\n",
        "    'B' : ['A'],\n",
        "    'C' : ['D','E','F','S'],\n",
        "    'D' : ['C'],\n",
        "    'E' : ['C','H'],\n",
        "    'F' : ['C','G'],\n",
        "    'G' : ['F','S'],\n",
        "    'H' : ['E','G'],\n",
        "    'S' : ['A','C','G']\n",
        "}\n",
        "\n",
        "def dfs(graph, node, visited):\n",
        "    if node not in visited:\n",
        "        visited.append(node)\n",
        "        for k in graph[node]:\n",
        "            dfs(graph,k, visited)\n",
        "    return visited\n",
        "\n",
        "visited = dfs(graph1,'D', [])\n",
        "print(visited)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "cZ1ohtTQE2cW",
        "outputId": "687017c7-9de3-4626-be51-d5d38bc05058"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['D', 'C', 'E', 'H', 'G', 'F', 'S', 'A', 'B']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Part 3-Implementation of A* Algorithm/OR Graph Search"
      ],
      "metadata": {
        "id": "Kdfs1A5uAMKw"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "import math\n",
        "import heapq\n",
        "class Cell:\n",
        "    def __init__(self):\n",
        "        self.parent_i = 0\n",
        "        self.parent_j = 0\n",
        "        self.f = float('inf')\n",
        "        self.g = float('inf')\n",
        "        self.h = 0\n",
        "ROW = 9\n",
        "COL = 10\n",
        "def is_valid(row, col):\n",
        "    return (row >= 0) and (row < ROW) and (col >= 0) and (col < COL)\n",
        "def is_unblocked(grid, row, col):\n",
        "    return grid[row][col] == 1\n",
        "def is_destination(row, col, dest):\n",
        "    return row == dest[0] and col == dest[1]\n",
        "def calculate_h_value(row, col, dest):\n",
        "    return ((row - dest[0]) ** 2 + (col - dest[1]) ** 2) ** 0.5\n",
        "def trace_path(cell_details, dest):\n",
        "    print(\"The Path is \")\n",
        "    path = []\n",
        "    row = dest[0]\n",
        "    col = dest[1]\n",
        "    while not (cell_details[row][col].parent_i == row and cell_details[row][col].parent_j == col):\n",
        "        path.append((row, col))\n",
        "        temp_row = cell_details[row][col].parent_i\n",
        "        temp_col = cell_details[row][col].parent_j\n",
        "        row = temp_row\n",
        "        col = temp_col\n",
        "    path.append((row, col))\n",
        "    path.reverse()\n",
        "    for i in path:\n",
        "        print(\"->\", i, end=\" \")\n",
        "    print()\n",
        "def a_star_search(grid, src, dest):\n",
        "    if not is_valid(src[0], src[1]) or not is_valid(dest[0], dest[1]):\n",
        "        print(\"Source or destination is invalid\")\n",
        "        return\n",
        "    if not is_unblocked(grid, src[0], src[1]) or not is_unblocked(grid, dest[0], dest[1]):\n",
        "        print(\"Source or the destination is blocked\")\n",
        "        return\n",
        "    if is_destination(src[0], src[1], dest):\n",
        "        print(\"We are already at the destination\")\n",
        "        return\n",
        "    closed_list = [[False for _ in range(COL)] for _ in range(ROW)]\n",
        "    cell_details = [[Cell() for _ in range(COL)] for _ in range(ROW)]\n",
        "    i = src[0]\n",
        "    j = src[1]\n",
        "    cell_details[i][j].f = 0\n",
        "    cell_details[i][j].g = 0\n",
        "    cell_details[i][j].h = 0\n",
        "    cell_details[i][j].parent_i = i\n",
        "    cell_details[i][j].parent_j = j\n",
        "    open_list = []\n",
        "    heapq.heappush(open_list, (0.0, i, j))\n",
        "    found_dest = False\n",
        "    while len(open_list) > 0:\n",
        "        p = heapq.heappop(open_list)\n",
        "        i = p[1]\n",
        "        j = p[2]\n",
        "        closed_list[i][j] = True\n",
        "        directions = [(0, 1), (0, -1), (1, 0), (-1, 0),\n",
        "                      (1, 1), (1, -1), (-1, 1), (-1, -1)]\n",
        "        for dir in directions:\n",
        "            new_i = i + dir[0]\n",
        "            new_j = j + dir[1]\n",
        "            if is_valid(new_i, new_j) and is_unblocked(grid, new_i, new_j) and not closed_list[new_i][new_j]:\n",
        "                if is_destination(new_i, new_j, dest):\n",
        "                    cell_details[new_i][new_j].parent_i = i\n",
        "                    cell_details[new_i][new_j].parent_j = j\n",
        "                    print(\"The destination cell is found\")\n",
        "                    trace_path(cell_details, dest)\n",
        "                    found_dest = True\n",
        "                    return\n",
        "                else:\n",
        "                    g_new = cell_details[i][j].g + 1.0\n",
        "                    h_new = calculate_h_value(new_i, new_j, dest)\n",
        "                    f_new = g_new + h_new\n",
        "                    if cell_details[new_i][new_j].f == float('inf') or cell_details[new_i][new_j].f > f_new:\n",
        "                        heapq.heappush(open_list, (f_new, new_i, new_j))\n",
        "                        cell_details[new_i][new_j].f = f_new\n",
        "                        cell_details[new_i][new_j].g = g_new\n",
        "                        cell_details[new_i][new_j].h = h_new\n",
        "                        cell_details[new_i][new_j].parent_i = i\n",
        "                        cell_details[new_i][new_j].parent_j = j\n",
        "    if not found_dest:\n",
        "        print(\"Failed to find the destination cell\")\n",
        "def main():\n",
        "    grid = [\n",
        "        [1, 0, 1, 1, 1, 1, 0, 1, 1, 1],\n",
        "        [1, 1, 1, 0, 1, 1, 1, 0, 1, 1],\n",
        "        [1, 1, 1, 0, 1, 1, 0, 1, 0, 1],\n",
        "        [0, 0, 1, 0, 1, 0, 0, 0, 0, 1],\n",
        "        [1, 1, 1, 0, 1, 1, 1, 0, 1, 0],\n",
        "        [1, 0, 1, 1, 1, 1, 0, 1, 0, 0],\n",
        "        [1, 0, 0, 0, 0, 1, 0, 0, 0, 1],\n",
        "        [1, 0, 1, 1, 1, 1, 0, 1, 1, 1],\n",
        "        [1, 1, 1, 0, 0, 0, 1, 0, 0, 1]\n",
        "    ]\n",
        "    src = [8, 0]\n",
        "    dest = [0, 0]\n",
        "    a_star_search(grid, src, dest)\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "    main()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "53IoVsneNjFX",
        "outputId": "fe18a8f7-119e-4793-df89-07adfdf9af28"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "The destination cell is found\n",
            "The Path is \n",
            "-> (8, 0) -> (7, 0) -> (6, 0) -> (5, 0) -> (4, 1) -> (3, 2) -> (2, 1) -> (1, 0) -> (0, 0) \n"
          ]
        }
      ]
    }
  ]
}
